type User @entity {
  id: ID!
  userAddress: Bytes!
  userName: String!
  bio: String!
  followers: [Followed!]! @derivedFrom(field: "follower")
  unFollowing: [Unfollowed!]! @derivedFrom(field: "unfollowed")
  messagesSent: [MessageSent!]! @derivedFrom(field: "sender")
  messagesReceived: [MessageSent!]! @derivedFrom(field: "recipient")
  withdrawals: [EtherWithdrawn!]! @derivedFrom(field: "user")
  posts: [PostCreated!]! @derivedFrom(field: "author")
  followersCount: BigInt!
  followingCount: BigInt!
  unfollowCount: BigInt!
  postCreatedCount: BigInt!
  postDeleteCount: BigInt!
  postLikeCount: BigInt!
  commentCount: BigInt!
  withdrawalCount: BigInt!
  totalAmountWithdrawn: BigInt!
  interactionCount: BigInt!
  createdAt: BigInt!
  transactionHash: Bytes!
}

type ProfileCreated @entity {
  id: Bytes!
  user: User!
  name: String!
  userID: BigInt!
  createdAt: BigInt!
  transactionHash: Bytes!
}

type Followed @entity {
  id: Bytes!
  follower: Bytes!
  following: User!
  timeStamp: BigInt!
  transactionHash: Bytes!
}

type Unfollowed @entity {
  id: Bytes!
  followers: Bytes!
  unfollowed: User!
  blockNumber: BigInt!
  createdAt: BigInt!
  transactionHash: Bytes!
}

type PostCreated @entity {
  id: Bytes!
  author: User!
  postID: BigInt!
  postContent: String!
  comments: [CommentAdded!]! @derivedFrom(field: "post")
  likes: [PostLiked!]! @derivedFrom(field: "liker")
  createdAt: BigInt!
  transactionHash: Bytes!
}

type PostDeleted @entity {
  id: Bytes!
  author: User!
  postID: BigInt!
  createdAt: BigInt!
  transactionHash: Bytes!
}

type PostLiked @entity {
  id: Bytes!
  liker: PostCreated!
  postID: BigInt!
  createdAt: BigInt!
  transactionHash: Bytes!
}

type PostUnliked @entity {
  id: Bytes!
  unliker: Bytes!
  postID: BigInt!
  createdAt: BigInt!
  transactionHash: Bytes!
}

type CommentAdded @entity {
  id: Bytes!
  commenter: User!
  post: PostCreated!
  postID: BigInt!
  comment: String!
  createdAt: BigInt!
  transactionHash: Bytes!
}

type MessageSent @entity {
  id: Bytes!
  sender: User!
  recipient: User!
  message: String!
  createdAt: BigInt!
  transactionHash: Bytes!
}

type PostEdited @entity {
  id: Bytes!
  editor: User!
  postID: BigInt!
  newDescription: String!
  createdAt: BigInt!
  transactionHash: Bytes!
}

type EtherWithdrawn @entity {
  id: Bytes!
  user: User!
  amount: BigInt!
  timestamp: BigInt!
  createdAt: BigInt!
  transactionHash: Bytes!
}
